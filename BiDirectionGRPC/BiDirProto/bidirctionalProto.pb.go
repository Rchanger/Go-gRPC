// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bidirctionalProto.proto

package BiDirProto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Request struct {
	Num                  int32    `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc11be0bdf3d5db6, []int{0}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

type Response struct {
	Result               int32    `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc11be0bdf3d5db6, []int{1}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func init() {
	proto.RegisterType((*Request)(nil), "BiDirProto.Request")
	proto.RegisterType((*Response)(nil), "BiDirProto.Response")
}

func init() {
	proto.RegisterFile("bidirctionalProto.proto", fileDescriptor_fc11be0bdf3d5db6)
}

var fileDescriptor_fc11be0bdf3d5db6 = []byte{
	// 164 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4f, 0xca, 0x4c, 0xc9,
	0x2c, 0x4a, 0x2e, 0xc9, 0xcc, 0xcf, 0x4b, 0xcc, 0x09, 0x28, 0xca, 0x2f, 0xc9, 0xd7, 0x2b, 0x00,
	0x91, 0x42, 0x5c, 0x4e, 0x99, 0x2e, 0x99, 0x45, 0x60, 0x11, 0x25, 0x69, 0x2e, 0xf6, 0xa0, 0xd4,
	0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21, 0x01, 0x2e, 0xe6, 0xbc, 0xd2, 0x5c, 0x09, 0x46, 0x05, 0x46,
	0x0d, 0xd6, 0x20, 0x10, 0x53, 0x49, 0x89, 0x8b, 0x23, 0x28, 0xb5, 0xb8, 0x20, 0x3f, 0xaf, 0x38,
	0x55, 0x48, 0x8c, 0x8b, 0xad, 0x28, 0xb5, 0xb8, 0x34, 0xa7, 0x04, 0xaa, 0x00, 0xca, 0x33, 0xf2,
	0xe5, 0x12, 0x0e, 0xce, 0xcc, 0x2d, 0xc8, 0x49, 0x0d, 0x2e, 0x29, 0x4a, 0x4d, 0xcc, 0x0d, 0x4e,
	0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0x15, 0x32, 0xe3, 0x62, 0xf6, 0x4d, 0xac, 0x10, 0x12, 0xd6, 0x43,
	0xd8, 0xa5, 0x07, 0xb5, 0x48, 0x4a, 0x04, 0x55, 0x10, 0x62, 0x81, 0x12, 0x83, 0x06, 0xa3, 0x01,
	0x63, 0x12, 0x1b, 0xd8, 0x89, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x05, 0x67, 0x98, 0xa9,
	0xbd, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SimpleStreamServiceClient is the client API for SimpleStreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SimpleStreamServiceClient interface {
	Max(ctx context.Context, opts ...grpc.CallOption) (SimpleStreamService_MaxClient, error)
}

type simpleStreamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSimpleStreamServiceClient(cc grpc.ClientConnInterface) SimpleStreamServiceClient {
	return &simpleStreamServiceClient{cc}
}

func (c *simpleStreamServiceClient) Max(ctx context.Context, opts ...grpc.CallOption) (SimpleStreamService_MaxClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SimpleStreamService_serviceDesc.Streams[0], "/BiDirProto.SimpleStreamService/Max", opts...)
	if err != nil {
		return nil, err
	}
	x := &simpleStreamServiceMaxClient{stream}
	return x, nil
}

type SimpleStreamService_MaxClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type simpleStreamServiceMaxClient struct {
	grpc.ClientStream
}

func (x *simpleStreamServiceMaxClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *simpleStreamServiceMaxClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SimpleStreamServiceServer is the server API for SimpleStreamService service.
type SimpleStreamServiceServer interface {
	Max(SimpleStreamService_MaxServer) error
}

// UnimplementedSimpleStreamServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSimpleStreamServiceServer struct {
}

func (*UnimplementedSimpleStreamServiceServer) Max(srv SimpleStreamService_MaxServer) error {
	return status.Errorf(codes.Unimplemented, "method Max not implemented")
}

func RegisterSimpleStreamServiceServer(s *grpc.Server, srv SimpleStreamServiceServer) {
	s.RegisterService(&_SimpleStreamService_serviceDesc, srv)
}

func _SimpleStreamService_Max_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SimpleStreamServiceServer).Max(&simpleStreamServiceMaxServer{stream})
}

type SimpleStreamService_MaxServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type simpleStreamServiceMaxServer struct {
	grpc.ServerStream
}

func (x *simpleStreamServiceMaxServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *simpleStreamServiceMaxServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _SimpleStreamService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "BiDirProto.SimpleStreamService",
	HandlerType: (*SimpleStreamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Max",
			Handler:       _SimpleStreamService_Max_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "bidirctionalProto.proto",
}
